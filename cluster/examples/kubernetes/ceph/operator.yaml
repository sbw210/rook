#################################################################################################################
# 대부분의 Kubernets 배포에 대한 공통 설정을 포함
###############################################################################################################

# Rook-Ceph Operator 구성 ConfigMap
# 아래 ConfigMap을 사용하여 Rook-Ceph Operator 구성을 재정의
kind: ConfigMap
apiVersion: v1
metadata:
  name: rook-ceph-operator-config
  # 이 ConfigMap은 operator의 네임스페이스에 있어야함!
  namespace: rook-ceph 
data:
  # CSI driver 적용(enable)
  # Default가 아닌 버전의 CSI(Container Storage Interface) driver를 실행하려면, operator.yaml에서 재정의 가능한 이미지 속성을 참조.
  ROOK_CSI_ENABLE_CEPHFS: "true"
  ROOK_CSI_ENABLE_RBD: "true"
  ROOK_CSI_ENABLE_GRPC_METRICS: "true"

  # CSI 컨테이너에 대한 로깅 레벨을 설정
  # 0-5까지 지원. 일반적으로 useful한 로그는 0, 자세한 로그는 5 (사용하려면 아래 주석해제)
  # CSI_LOG_LEVEL: "0"

  # OMAP GENERATOR는 PV이름과 RBD 이미지 사이에 omap 매핑을 생성.
  # RBD 미러링 기능을 사용하려면 CSI_ENABLE_OMAP_GENERATOR를 활성화해야함
  # 기본적으로 OMAP생성기 사이드카는 CSI 프로비저닝 도구 Pod와 함께 배포되어 false로 설정
  # CSI_ENABLE_OMAP_GENERATOR: "false"

  # CephFS 프로비저너 POD에서 snapshotter 컨테이너의 배포를 비활성화하려면 false로 설정
  CSI_ENABLE_CEPHFS_SNAPSHOTTER: "true"

  # RBD 프로비저너 POD에서 snapshotter 컨테이너의 배포를 비활성화하려면 false로 설정
  CSI_ENABLE_RBD_SNAPSHOTTER: "true"

  # ceph-fuse 대신 cephfs 커널 드라이버를 활성화함
  # kernel client를 비활성화하면 업그레이드 도중에 APP이 중단될 수 있음
  # 업그레이드 참조 가이드: https://rook.io/docs/rook/master/ceph-upgrade.html
  # NOTE! cephfs quota는 커널 버전 4.17 미만에서는 지원되지 않습니다.
  CSI_FORCE_CEPHFS_KERNEL_CLIENT: "true"

  # (선택 사항) RBD PVC가 mount될 때 volume의 소유권 또는 권한을 수정하기위한 정책
  # 지원되는 값은 링크 참조 = https://kubernetes-csi.github.io/docs/support-fsgroup.html
  CSI_RBD_FSGROUPPOLICY: "ReadWriteOnceWithFSType"

  # (선택 사항) CephFA PVC가 마운트될 때 volume의 소유권 또는 권한을 수정하기위한 정책 
  # 지원되는 값은 링크 참조 = https://kubernetes-csi.github.io/docs/support-fsgroup.html
  CSI_CEPHFS_FSGROUPPOLICY: "ReadWriteOnceWithFSType"

  # (선택 사항) 지원되지 않는 Ceph-csi 이미지 시작 허용여부
  ROOK_CSI_ALLOW_UNSUPPORTED_VERSION: "false"
  # Rook에서 지원하는 CSI의 기본버전이 시작됨.
  # 버전을 변경하려면 공식적으로 지원되는 것과 다른 것으로 CSI 드라이버의 수를 변경할 것
  # 이러한 이미지를 원하는 CSI 드라이버 릴리스에 추가합니다.
  # ROOK_CSI_CEPH_IMAGE: "quay.io/cephcsi/cephcsi:v3.2.0"
  # ROOK_CSI_REGISTRAR_IMAGE: "k8s.gcr.io/sig-storage/csi-node-driver-registrar:v2.0.1"
  # ROOK_CSI_RESIZER_IMAGE: "k8s.gcr.io/sig-storage/csi-resizer:v1.0.0"
  # ROOK_CSI_PROVISIONER_IMAGE: "k8s.gcr.io/sig-storage/csi-provisioner:v2.0.0"
  # ROOK_CSI_SNAPSHOTTER_IMAGE: "k8s.gcr.io/sig-storage/csi-snapshotter:v3.0.0"
  # ROOK_CSI_ATTACHER_IMAGE: "k8s.gcr.io/sig-storage/csi-attacher:v3.0.0"

  # (선택 사항) csi 플러그인 포드에 대해 사용자가 만든 priorityclassName을 설정
  # CSI_PLUGIN_PRIORITY_CLASSNAME: "system-node-critical"

  # (선택 사항) csi provisioner pod에 대해 사용자가 생성 한 priorityclassName을 설정
  # CSI_PROVISIONER_PRIORITY_CLASSNAME: "system-cluster-critical"

  # CSI CephFS 플러그인 데몬 셋 업데이트 전략. 지원되는 값은 OnDelete 및 RollingUpdate
  # 기본값은 RollingUpdate.
  # CSI_CEPHFS_PLUGIN_UPDATE_STRATEGY: "OnDelete"
  # CSI RBD 플러그인 데몬 셋 업데이트 전략, 지원되는 값은 OnDelete 및 RollingUpdate
  # 기본값은 RollingUpdate.
  # CSI_RBD_PLUGIN_UPDATE_STRATEGY: "OnDelete"

  # kubelet이 /var/lib/kubelet 경로 이외의 경로를 사용하도록 구성된 경우 kubelet 디렉토리 경로지정
  # ROOK_CSI_KUBELET_DIR_PATH: "/var/lib/kubelet"

  # CSI CephFS 배포 및 DaemonSets 포드에 추가 할 라벨
  # ROOK_CSI_CEPHFS_POD_LABELS: "key1=value1,key2=value2"
  # CSI RBD 배포 및 DaemonSets 포드에 추가 할 라벨
  # ROOK_CSI_RBD_POD_LABELS: "key1=value1,key2=value2"

  # (선택 사항) Ceph Provisioner NodeAffinity.
  # CSI_PROVISIONER_NODE_AFFINITY: "role=storage-node; storage=rook, ceph"
  # (선택 사항) Ceph CSI 프로비저닝 도구 toleration 목록. YAML 형식으로 허용할 taint를 기입
  # CSI Provisioner는 다른 ceph daemon과 동일한 node에서 시작하는 것이 가장 좋음.
  # CSI_PROVISIONER_TOLERATIONS: |
  #   - effect: NoSchedule
  #     key: node-role.kubernetes.io/controlplane
  #     operator: Exists
  #   - effect: NoExecute
  #     key: node-role.kubernetes.io/etcd
  #     operator: Exists
  # (선택 사항) Ceph CSI plugin NodeAffinity.
  # CSI_PLUGIN_NODE_AFFINITY: "role=storage-node; storage=rook, ceph"
  # (선택 사항) CEPH CSI 플러그인 허용 목록. YAML 형식으로 허용할 taint를 기입
  # 클라이언트가 스토리지를 마운트해야하는 모든 노드에서 CSI Plugin을 시작해야함
  # CSI_PLUGIN_TOLERATIONS: |
  #   - effect: NoSchedule
  #     key: node-role.kubernetes.io/controlplane
  #     operator: Exists
  #   - effect: NoExecute
  #     key: node-role.kubernetes.io/etcd
  #     operator: Exists

  # (선택 사항) Ceph CSI RBD 제공자 리소스 요구사항 목록. 여기 리소스 목록을 입력
  # Provisioner Pod에 적용할 Request / Limits 기입
  # CSI_RBD_PROVISIONER_RESOURCE: |
  #  - name : csi-provisioner
  #    resource:
  #      requests:
  #        memory: 128Mi
  #        cpu: 100m
  #      limits:
  #        memory: 256Mi
  #        cpu: 200m
  #  - name : csi-resizer
  #    resource:
  #      requests:
  #        memory: 128Mi
  #        cpu: 100m
  #      limits:
  #        memory: 256Mi
  #        cpu: 200m
  #  - name : csi-attacher
  #    resource:
  #      requests:
  #        memory: 128Mi
  #        cpu: 100m
  #      limits:
  #        memory: 256Mi
  #        cpu: 200m
  #  - name : csi-snapshotter
  #    resource:
  #      requests:
  #        memory: 128Mi
  #        cpu: 100m
  #      limits:
  #        memory: 256Mi
  #        cpu: 200m
  #  - name : csi-rbdplugin
  #    resource:
  #      requests:
  #        memory: 512Mi
  #        cpu: 250m
  #      limits:
  #        memory: 1Gi
  #        cpu: 500m
  #  - name : liveness-prometheus
  #    resource:
  #      requests:
  #        memory: 128Mi
  #        cpu: 50m
  #      limits:
  #        memory: 256Mi
  #        cpu: 100m
  # (선택 사항) CEPH CSI RBD plugin 리소스 요구사항 목록, 여기에 리소스 목록 입력
  # Plugin Pod에 적용할 Request / Limits 기입
  # CSI_RBD_PLUGIN_RESOURCE: |
  #  - name : driver-registrar
  #    resource:
  #      requests:
  #        memory: 128Mi
  #        cpu: 50m
  #      limits:
  #        memory: 256Mi
  #        cpu: 100m
  #  - name : csi-rbdplugin
  #    resource:
  #      requests:
  #        memory: 512Mi
  #        cpu: 250m
  #      limits:
  #        memory: 1Gi
  #        cpu: 500m
  #  - name : liveness-prometheus
  #    resource:
  #      requests:
  #        memory: 128Mi
  #        cpu: 50m
  #      limits:
  #        memory: 256Mi
  #        cpu: 100m
  # (선택사항) CEPH CSI CephFS Provisioner 리소스 요구사항 목록, 여기에 리소스 목록 입력
  # Pod에 적용할 Request / Limits 기입
  # CSI_CEPHFS_PROVISIONER_RESOURCE: |
  #  - name : csi-provisioner
  #    resource:
  #      requests:
  #        memory: 128Mi
  #        cpu: 100m
  #      limits:
  #        memory: 256Mi
  #        cpu: 200m
  #  - name : csi-resizer
  #    resource:
  #      requests:
  #        memory: 128Mi
  #        cpu: 100m
  #      limits:
  #        memory: 256Mi
  #        cpu: 200m
  #  - name : csi-attacher
  #    resource:
  #      requests:
  #        memory: 128Mi
  #        cpu: 100m
  #      limits:
  #        memory: 256Mi
  #        cpu: 200m
  #  - name : csi-cephfsplugin
  #    resource:
  #      requests:
  #        memory: 512Mi
  #        cpu: 250m
  #      limits:
  #        memory: 1Gi
  #        cpu: 500m
  #  - name : liveness-prometheus
  #    resource:
  #      requests:
  #        memory: 128Mi
  #        cpu: 50m
  #      limits:
  #        memory: 256Mi
  #        cpu: 100m
  # (선택 사항) CEPH CSI CephFS 플러그인 리소스 요구 사항 목록, 여기에 리소스 목록 입력
  # Plugin Pod에 적용 할 요청 및 제한
  # CSI_CEPHFS_PLUGIN_RESOURCE: |
  #  - name : driver-registrar
  #    resource:
  #      requests:
  #        memory: 128Mi
  #        cpu: 50m
  #      limits:
  #        memory: 256Mi
  #        cpu: 100m
  #  - name : csi-cephfsplugin
  #    resource:
  #      requests:
  #        memory: 512Mi
  #        cpu: 250m
  #      limits:
  #        memory: 1Gi
  #        cpu: 500m
  #  - name : liveness-prometheus
  #    resource:
  #      requests:
  #        memory: 128Mi
  #        cpu: 50m
  #      limits:
  #        memory: 256Mi
  #        cpu: 100m

  # CSI CSI Ceph FS grpc 및 liveness metric port 구성
  # CSI_CEPHFS_GRPC_METRICS_PORT: "9091"
  # CSI_CEPHFS_LIVENESS_METRICS_PORT: "9081"
  # CSI RBD grpc 및 liveness metric port 구성
  # CSI_RBD_GRPC_METRICS_PORT: "9090"
  # CSI_RBD_LIVENESS_METRICS_PORT: "9080"

  # OBC Provisioner가 Operator Namespace를 감시해야하는지 여부, 그렇지 않은 경우 클러스터의 네임 스페이스가 사용됩니다.
  ROOK_OBC_WATCH_OPERATOR_NAMESPACE: "true"

  # (선택 사항) Admission controller NodeAffinity.
  # ADMISSION_CONTROLLER_NODE_AFFINITY: "role=storage-node; storage=rook, ceph"
  # (선택 사항) Admission controller tolerations list. Put here list of taints you want to tolerate in YAML format.
  # Admission controller would be best to start on the same nodes as other ceph daemons.
  # ADMISSION_CONTROLLER_TOLERATIONS: |
  #   - effect: NoSchedule
  #     key: node-role.kubernetes.io/controlplane
  #     operator: Exists
  #   - effect: NoExecute
  #     key: node-role.kubernetes.io/etcd
  #     operator: Exists
---
# OLM: OPERATOR DEPLOYMENT 시작
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rook-ceph-operator
  namespace: rook-ceph 
  labels:
    operator: rook
    storage-backend: ceph
spec:
  selector:
    matchLabels:
      app: rook-ceph-operator
  replicas: 1
  template:
    metadata:
      labels:
        app: rook-ceph-operator
    spec:
      serviceAccountName: rook-ceph-system
      containers:
      - name: rook-ceph-operator
        image: rook/ceph:master
        args: ["ceph", "operator"]
        volumeMounts:
        - mountPath: /var/lib/rook
          name: rook-config
        - mountPath: /etc/ceph
          name: default-config-dir
        env:
        # operator가 동일한 namespace에 있는 클러스터CRD만 감시해야하는 경우 'true'로 설정
        # 'true'가 아닌 경우, operator는 모든 네임스페이스에서 클러스터 CRD를 감시합니다.
        - name: ROOK_CURRENT_NAMESPACE_ONLY
          value: "false"
        # RBAC를 비활성화하려면 다음 주석을 제거할 것:
        # - name: RBAC_ENABLED
        #   value: "false"
        # Rook Agent toleration. 모든 key로 모든 taint를 toleration함.
        # 이중에서 선택할것 >> NoSchedule, PreferNoSchedule and NoExecute:
        # - name: AGENT_TOLERATION
        #   value: "NoSchedule"
        # (선택 사항) Rook Agent toleration key. Set this to the key of the taint you want to tolerate
        # - name: AGENT_TOLERATION_KEY
        #   value: "<KeyOfTheTaintToTolerate>"
        # (선택 사항) Rook Agent tolerations list. Put here list of taints you want to tolerate in YAML format.
        # - name: AGENT_TOLERATIONS
        #   value: |
        #     - effect: NoSchedule
        #       key: node-role.kubernetes.io/controlplane
        #       operator: Exists
        #     - effect: NoExecute
        #       key: node-role.kubernetes.io/etcd
        #       operator: Exists
        # (선택 사항) Rook Agent priority class name to set on the pod(s)
        # - name: AGENT_PRIORITY_CLASS_NAME
        #   value: "<PriorityClassName>"
        # (선택 사항) Rook Agent NodeAffinity.
        # - name: AGENT_NODE_AFFINITY
        #   value: "role=storage-node; storage=rook,ceph"
        # (선택 사항) Rook Agent mount security mode. 선택가능 `Any` or `Restricted`.
        # `Any`는 기본으로 Ceph admin credentials(Ceph 관리자 자격증명)을 사용
        # `Restricted`를 사용하려면, 각 네임스페이스 저장소에 Ceph secret이 있어야함.
        # set `mountUser` to the Ceph user, `mountSecret` to the Kubernetes secret name.
        # to the namespace in which the `mountSecret` Kubernetes secret namespace.
        # - name: AGENT_MOUNT_SECURITY_MODE
        #   value: "Any"
        # Set the path where the Rook agent can find the flex volumes
        # - name: FLEXVOLUME_DIR_PATH
        #   value: "<PathToFlexVolumes>"
        # Set the path where kernel modules can be found
        # - name: LIB_MODULES_DIR_PATH
        #   value: "<PathToLibModules>"
        # Mount any extra directories into the agent container
        # - name: AGENT_MOUNTS
        #   value: "somemount=/host/path:/container/path,someothermount=/host/path2:/container/path2"
        # Rook Discover toleration. Will tolerate all taints with all keys.
        # Choose between NoSchedule, PreferNoSchedule and NoExecute:
        # - name: DISCOVER_TOLERATION
        #   value: "NoSchedule"
        # (Optional) Rook Discover toleration key. Set this to the key of the taint you want to tolerate
        # - name: DISCOVER_TOLERATION_KEY
        #   value: "<KeyOfTheTaintToTolerate>"
        # (Optional) Rook Discover tolerations list. Put here list of taints you want to tolerate in YAML format.
        # - name: DISCOVER_TOLERATIONS
        #   value: |
        #     - effect: NoSchedule
        #       key: node-role.kubernetes.io/controlplane
        #       operator: Exists
        #     - effect: NoExecute
        #       key: node-role.kubernetes.io/etcd
        #       operator: Exists
        # (Optional) Rook Discover priority class name to set on the pod(s)
        # - name: DISCOVER_PRIORITY_CLASS_NAME
        #   value: "<PriorityClassName>"
        # (Optional) Discover Agent NodeAffinity.
        # - name: DISCOVER_AGENT_NODE_AFFINITY
        #   value: "role=storage-node; storage=rook, ceph"
        # (Optional) Discover Agent Pod Labels.
        # - name: DISCOVER_AGENT_POD_LABELS
        #   value: "key1=value1,key2=value2"
        # Allow rook to create multiple file systems. Note: This is considered
        # an experimental feature in Ceph as described at
        # http://docs.ceph.com/docs/master/cephfs/experimental-features/#multiple-filesystems-within-a-ceph-cluster
        # which might cause mons to crash as seen in https://github.com/rook/rook/issues/1027
        - name: ROOK_ALLOW_MULTIPLE_FILESYSTEMS
          value: "false"

        # The logging level for the operator: INFO | DEBUG
        - name: ROOK_LOG_LEVEL
          value: "INFO"

        # The duration between discovering devices in the rook-discover daemonset.
        - name: ROOK_DISCOVER_DEVICES_INTERVAL
          value: "60m"

        # Whether to start pods as privileged that mount a host path, which includes the Ceph mon and osd pods.
        # Set this to true if SELinux is enabled (e.g. OpenShift) to workaround the anyuid issues.
        # For more details see https://github.com/rook/rook/issues/1314#issuecomment-355799641
        - name: ROOK_HOSTPATH_REQUIRES_PRIVILEGED
          value: "false"

        # In some situations SELinux relabelling breaks (times out) on large filesystems, and doesn't work with cephfs ReadWriteMany volumes (last relabel wins).
        # Disable it here if you have similar issues.
        # For more details see https://github.com/rook/rook/issues/2417
        - name: ROOK_ENABLE_SELINUX_RELABELING
          value: "true"

        # In large volumes it will take some time to chown all the files. Disable it here if you have performance issues.
        # For more details see https://github.com/rook/rook/issues/2254
        - name: ROOK_ENABLE_FSGROUP
          value: "true"

        # Disable automatic orchestration when new devices are discovered
        - name: ROOK_DISABLE_DEVICE_HOTPLUG
          value: "false"

        # Provide customised regex as the values using comma. For eg. regex for rbd based volume, value will be like "(?i)rbd[0-9]+".
        # In case of more than one regex, use comma to separate between them.
        # Default regex will be "(?i)dm-[0-9]+,(?i)rbd[0-9]+,(?i)nbd[0-9]+"
        # Add regex expression after putting a comma to blacklist a disk
        # If value is empty, the default regex will be used.
        - name: DISCOVER_DAEMON_UDEV_BLACKLIST
          value: "(?i)dm-[0-9]+,(?i)rbd[0-9]+,(?i)nbd[0-9]+"

        # Whether to enable the flex driver. By default it is enabled and is fully supported, but will be deprecated in some future release
        # in favor of the CSI driver.
        - name: ROOK_ENABLE_FLEX_DRIVER
          value: "false"

        # Whether to start the discovery daemon to watch for raw storage devices on nodes in the cluster.
        # This daemon does not need to run if you are only going to create your OSDs based on StorageClassDeviceSets with PVCs.
        - name: ROOK_ENABLE_DISCOVERY_DAEMON
          value: "false"

        # Time to wait until the node controller will move Rook pods to other
        # nodes after detecting an unreachable node.
        # Pods affected by this setting are:
        # mgr, rbd, mds, rgw, nfs, PVC based mons and osds, and ceph toolbox
        # The value used in this variable replaces the default value of 300 secs
        # added automatically by k8s as Toleration for
        # <node.kubernetes.io/unreachable>
        # The total amount of time to reschedule Rook pods in healthy nodes
        # before detecting a <not ready node> condition will be the sum of:
        #  --> node-monitor-grace-period: 40 seconds (k8s kube-controller-manager flag)
        #  --> ROOK_UNREACHABLE_NODE_TOLERATION_SECONDS: 5 seconds
        - name: ROOK_UNREACHABLE_NODE_TOLERATION_SECONDS
          value: "5"

        # The name of the node to pass with the downward API
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        # The pod name to pass with the downward API
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        # The pod namespace to pass with the downward API
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace

        #  Uncomment it to run lib bucket provisioner in multithreaded mode
        #- name: LIB_BUCKET_PROVISIONER_THREADS
        #  value: "5"

      # Uncomment it to run rook operator on the host network
      #hostNetwork: true
      volumes:
      - name: rook-config
        emptyDir: {}
      - name: default-config-dir
        emptyDir: {}
# OLM: END OPERATOR DEPLOYMENT
